{"version":3,"sources":["components/FileLoader.js","components/Visualizer.js","components/Sound.js","containers/SoundContainer.js","App.js","serviceWorker.js","index.js","sound-icon.png"],"names":["FileLoader","props","handleSubmit","e","preventDefault","uploadedFile","fileInput","current","files","soundElement","createSound","handleFileUpload","React","createRef","sound","document","createElement","src","URL","createObjectURL","preload","crossOrigin","name","id","type","ref","this","onChange","htmlFor","className","Component","Visualizer","renderVisualizer","barHeight","canvas","canvasContext","getContext","barWidth","width","renderFrame","agg","freqDataMany","clearRect","height","requestAnimationFrame","audioContexts","forEach","audioContextObj","freqData","analyser","getByteFrequencyData","push","length","i","data","centerX","centerY","rads","Math","PI","x","cos","y","sin","x_end","y_end","drawBar","beginPath","arc","lineWidth","stroke","closePath","x1","y1","x2","y2","gradient","createLinearGradient","addColorStop","strokeStyle","moveTo","lineTo","defaultProps","Sound","useState","currentlyPlaying","setCurrentlyPlaying","volume","setVolume","soundIcon","alt","onClick","pause","play","min","max","value","input","target","parseFloat","toFixed","replace","SoundContainer","soundComponents","sounds","map","App","audioContextFromFile","createAudioContext","audioContextArr","state","setState","audioContext","AudioContext","createMediaElementSource","createAnalyser","bufferLength","frequencyBinCount","Uint8Array","connect","destination","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.5d5f3a44.chunk.js","sourcesContent":["import React from 'react';\n\nclass FileLoader extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.fileInput = React.createRef();\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const uploadedFile = this.fileInput.current.files[0];\n        const soundElement = this.createSound(uploadedFile);\n        this.props.handleFileUpload(soundElement)\n    }\n    \n    createSound (uploadedFile) {\n        const sound = document.createElement('audio');\n        \n        sound.src = URL.createObjectURL(uploadedFile);\n        sound.preload=\"none\";\n        sound.crossOrigin = \"anonymous\";\n        sound.name = uploadedFile.name;\n        \n        return sound;\n    }\n\n    render() {\n        return(\n            <div>\n                <input\n                id=\"file-load\"\n                type=\"file\" \n                ref={this.fileInput}\n                onChange={this.handleSubmit}\n                />\n                <label \n                htmlFor=\"file-load\" \n                className=\"upload-file-label\"\n                >Load file...\n                </label>\n            </div>\n        )\n    }\n} // end of FileLoader class\n\nexport default FileLoader;","import React from 'react';\n\nclass Visualizer extends React.Component {\n    static defaultProps = {\n        audioContexts: []\n    }\n    constructor(props) {\n        super(props);\n        this.canvas = React.createRef();\n    }\n\n    renderVisualizer = () => {\n        const canvas = this.canvas.current;\n        const canvasContext = canvas.getContext('2d')\n  \n         const numBars = 125;\n  \n         let barWidth = (canvas.width / numBars) * 30;\n         let barHeight;\n  \n         const renderFrame = () => {\n             const agg = [];\n             const freqDataMany = [];\n             canvasContext.clearRect(0, 0, canvas.width, canvas.height)\n             requestAnimationFrame(renderFrame);\n          \n    \n             this.props.audioContexts.forEach((audioContextObj) => {\n                 let freqData = audioContextObj.freqData;\n                 audioContextObj.analyser.getByteFrequencyData(freqData);\n                 freqDataMany.push(freqData);\n             })\n          \n             if (this.props.audioContexts.length > 0) {\n                 for (let i = 0; i < freqDataMany[0].length; i++) {\n                     agg.push(0);\n                     freqDataMany.forEach((data) => {\n                     agg[i] += data[i];\n                     });\n                 }\n\n                 const centerX = canvas.width / 2;\n                 const centerY = canvas.height / 2;\n                 const radius = 45;\n\n                 for (let i = 0; i < (numBars); i++) {\n                     barHeight = (agg[i] * 0.5);\n                     barWidth = 3;\n  \n                  \n                     let rads = (Math.PI * 2) / numBars;\n                     let x = centerX + Math.cos(rads * i) * (radius);\n                     let y = centerY + Math.sin(rads * i) * (radius);\n                     let x_end = centerX + Math.cos(rads * i) * (radius + barHeight);\n                     let y_end = centerY + Math.sin(rads * i) * (radius + barHeight);\n  \n                     this.drawBar(canvasContext, x, y, x_end, y_end, barWidth)\n                 }\n\n                 canvasContext.beginPath();\n                 canvasContext.arc( centerX, centerY, radius, 0, (2*Math.PI) );\n                 canvasContext.lineWidth = 1;\n                 canvasContext.stroke();\n                 canvasContext.closePath();\n             }  \n         }\n         renderFrame();\n     }\n      \n  \n    drawBar = (canvasContext, x1, y1, x2, y2, width) => {\n         const gradient = canvasContext.createLinearGradient(x1, y1, x2, y2);\n         gradient.addColorStop(0, \"rgb(209, 136, 155)\");\n         gradient.addColorStop(0.5, \"rgb(247, 223, 230)\"); \n         gradient.addColorStop(0.8, \"rgb(230, 243, 245)\"); \n         gradient.addColorStop(1, \"white\");\n      \n         canvasContext.lineWidth = width;\n         canvasContext.strokeStyle = gradient;\n         canvasContext.beginPath();\n         canvasContext.moveTo(x1,y1);\n         canvasContext.lineTo(x2,y2);\n         canvasContext.stroke();\n         canvasContext.closePath();\n     }\n  \n    componentDidMount() {\n        this.renderVisualizer();\n    }\n\n    render() {\n        return(\n            <>\n             <canvas \n               className=\"visualizer\"\n               width={500}\n               height={500}\n               ref={this.canvas}\n             />\n            </>\n        )\n    }\n} // end of Visualizer class\n\n\n\nexport default Visualizer;","import React, { useState } from 'react';\nimport soundIcon from '../sound-icon.png';\n\nconst Sound = (props) => {\n   const [currentlyPlaying, setCurrentlyPlaying] = useState(true);\n   const [volume, setVolume] = useState(50);\n\n   const sound = props.sound;\n\n   const handleTogglePlay = () => {\n       currentlyPlaying ? sound.pause() : sound.play()\n\n       setCurrentlyPlaying(!currentlyPlaying);\n   }\n\n   const handleVolumeInput = (e) => {\n       let input = e.target.value;\n       setVolume(input);\n       input = parseFloat(input * 0.01).toFixed(2);\n       sound.volume = input;\n    }\n\n   return(\n       <div className=\"sound\">\n           <img\n             className=\"sound-icon\"\n             src={soundIcon} \n             alt='sound-icon' \n             height='60' width='60'\n           />\n           <div className=\"controls\">\n              <i className=\"material-icons play-pause-btn\" onClick={handleTogglePlay}> {currentlyPlaying ? \"pause_circle_outline\" : \"play_circle_outline\"}</i>\n           </div>\n           <div>\n            <input\n              className=\"volume-slider\"\n              type=\"range\"\n              min=\"0\"\n              max=\"100\"\n              value={volume}\n              onChange={handleVolumeInput}\n            />\n          </div>\n          <p className=\"now-playing\">{sound.name.replace(/\\.[^/.]+$/, \"\")}</p>\n       </div>\n   ) \n}\n\nexport default Sound","import React from 'react';\nimport Sound from '../components/Sound';\n\nexport default class SoundContainer extends React.Component {\n\n    soundComponents = () => {\n       return this.props.sounds.map((sound) => \n           <Sound sound={sound}/>\n       )\n    }\n\n    render() {\n        return(\n            <div className=\"sound-container\">\n                {this.soundComponents()}\n            </div>\n        )\n    }\n\n\n} // end of SoundContainer class\n\n","import React from 'react';\nimport FileLoader from './components/FileLoader'\nimport './App.css';\nimport Visualizer from './components/Visualizer';\nimport SoundContainer from './containers/SoundContainer';        \n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      audioContexts: []\n    }\n  }\n\n  handleFileUpload = (uploadedFile) => {\n    const audioContextFromFile = this.createAudioContext(uploadedFile);\n    const audioContextArr = [...this.state.audioContexts, audioContextFromFile];\n\n    this.setState({\n      audioContexts: audioContextArr\n    })\n\n    audioContextFromFile.sound.play()\n  }\n  \n  createAudioContext = (sound) => {\n    // Create new audio context with given sound\n    const audioContext = new AudioContext();\n\n    // Create analyser (gets lots o data bout audio)\n    const src = audioContext.createMediaElementSource(sound);\n    const analyser = audioContext.createAnalyser(); \n\n    // Array limited to unsigned int values 0-255\n    const bufferLength = analyser.frequencyBinCount;\n    const freqData = new Uint8Array(bufferLength);\n\n    src.connect(analyser);\n    analyser.connect(audioContext.destination);\n\n    const audioContextObj = {\n        sound,\n        freqData,\n        analyser\n    }\n\n    return audioContextObj; \n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n      <h2 className=\"header\">Welcome to the ~Multi-Viz~</h2>\n      <p className=\"description\">Upload a sound file and watch the show. Upload another file, see what happens.</p>\n        <FileLoader handleFileUpload={this.handleFileUpload} />\n        {/* </header> */}\n        <Visualizer audioContexts={this.state.audioContexts}/>\n        <SoundContainer sounds={this.state.audioContexts.map(audioContext => audioContext.sound)} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/sound-icon.4d264c39.png\";"],"sourceRoot":""}